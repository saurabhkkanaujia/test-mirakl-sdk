<?php
/**
 * OrderResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ced
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mirakl Connect APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: afcae4e6-28a6-4477-a8ed-d78442ed50d5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ced\Model;

use \ArrayAccess;
use \Ced\ObjectSerializer;

/**
 * OrderResponse Class Doc Comment
 *
 * @category Class
 * @package  Ced
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'channel_order_id' => 'string',
        'origin' => '\Ced\Model\Origin',
        'created_at' => '\DateTime',
        'channel_updated_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'status' => 'string',
        'status_reason' => 'string',
        'order_lines' => '\Ced\Model\OrderLineResponse[]',
        'billing_info' => '\Ced\Model\BillingInfo',
        'shipping_info' => '\Ced\Model\ShippingInfo',
        'fulfillment' => '\Ced\Model\Fulfillment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'channel_order_id' => null,
        'origin' => null,
        'created_at' => 'date-time',
        'channel_updated_at' => 'date-time',
        'updated_at' => 'date-time',
        'status' => null,
        'status_reason' => null,
        'order_lines' => null,
        'billing_info' => null,
        'shipping_info' => null,
        'fulfillment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'channel_order_id' => false,
		'origin' => false,
		'created_at' => false,
		'channel_updated_at' => false,
		'updated_at' => false,
		'status' => false,
		'status_reason' => false,
		'order_lines' => false,
		'billing_info' => false,
		'shipping_info' => false,
		'fulfillment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'channel_order_id' => 'channel_order_id',
        'origin' => 'origin',
        'created_at' => 'created_at',
        'channel_updated_at' => 'channel_updated_at',
        'updated_at' => 'updated_at',
        'status' => 'status',
        'status_reason' => 'status_reason',
        'order_lines' => 'order_lines',
        'billing_info' => 'billing_info',
        'shipping_info' => 'shipping_info',
        'fulfillment' => 'fulfillment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channel_order_id' => 'setChannelOrderId',
        'origin' => 'setOrigin',
        'created_at' => 'setCreatedAt',
        'channel_updated_at' => 'setChannelUpdatedAt',
        'updated_at' => 'setUpdatedAt',
        'status' => 'setStatus',
        'status_reason' => 'setStatusReason',
        'order_lines' => 'setOrderLines',
        'billing_info' => 'setBillingInfo',
        'shipping_info' => 'setShippingInfo',
        'fulfillment' => 'setFulfillment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channel_order_id' => 'getChannelOrderId',
        'origin' => 'getOrigin',
        'created_at' => 'getCreatedAt',
        'channel_updated_at' => 'getChannelUpdatedAt',
        'updated_at' => 'getUpdatedAt',
        'status' => 'getStatus',
        'status_reason' => 'getStatusReason',
        'order_lines' => 'getOrderLines',
        'billing_info' => 'getBillingInfo',
        'shipping_info' => 'getShippingInfo',
        'fulfillment' => 'getFulfillment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_AWAITING_FRAUD_CHECK = 'AWAITING_FRAUD_CHECK';
    public const STATUS_AWAITING_ACCEPTANCE = 'AWAITING_ACCEPTANCE';
    public const STATUS_AWAITING_PAYMENT = 'AWAITING_PAYMENT';
    public const STATUS_AWAITING_SHIPMENT = 'AWAITING_SHIPMENT';
    public const STATUS_SHIPPED = 'SHIPPED';
    public const STATUS_DELIVERED = 'DELIVERED';
    public const STATUS_CLOSED = 'CLOSED';
    public const STATUS_CHANNEL_SPECIFIC = 'CHANNEL_SPECIFIC';
    public const STATUS_REASON_REFUSED = 'REFUSED';
    public const STATUS_REASON_ACCEPTANCE_TIMEOUT = 'ACCEPTANCE_TIMEOUT';
    public const STATUS_REASON_FRAUD_CHECK_FAILED = 'FRAUD_CHECK_FAILED';
    public const STATUS_REASON_FRAUD_CHECK_TIMEOUT = 'FRAUD_CHECK_TIMEOUT';
    public const STATUS_REASON_REFUSED_PAYMENT = 'REFUSED_PAYMENT';
    public const STATUS_REASON_PAYMENT_TIMEOUT = 'PAYMENT_TIMEOUT';
    public const STATUS_REASON_CANCELED = 'CANCELED';
    public const STATUS_REASON_REFUNDED = 'REFUNDED';
    public const STATUS_REASON_AUTOMATICALLY_CLOSED = 'AUTOMATICALLY_CLOSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AWAITING_FRAUD_CHECK,
            self::STATUS_AWAITING_ACCEPTANCE,
            self::STATUS_AWAITING_PAYMENT,
            self::STATUS_AWAITING_SHIPMENT,
            self::STATUS_SHIPPED,
            self::STATUS_DELIVERED,
            self::STATUS_CLOSED,
            self::STATUS_CHANNEL_SPECIFIC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusReasonAllowableValues()
    {
        return [
            self::STATUS_REASON_REFUSED,
            self::STATUS_REASON_ACCEPTANCE_TIMEOUT,
            self::STATUS_REASON_FRAUD_CHECK_FAILED,
            self::STATUS_REASON_FRAUD_CHECK_TIMEOUT,
            self::STATUS_REASON_REFUSED_PAYMENT,
            self::STATUS_REASON_PAYMENT_TIMEOUT,
            self::STATUS_REASON_CANCELED,
            self::STATUS_REASON_REFUNDED,
            self::STATUS_REASON_AUTOMATICALLY_CLOSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('channel_order_id', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('channel_updated_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_reason', $data ?? [], null);
        $this->setIfExists('order_lines', $data ?? [], null);
        $this->setIfExists('billing_info', $data ?? [], null);
        $this->setIfExists('shipping_info', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusReasonAllowableValues();
        if (!is_null($this->container['status_reason']) && !in_array($this->container['status_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status_reason', must be one of '%s'",
                $this->container['status_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique order identifier used by Mirakl Connect. This identifier can be used as a primary key, but it must not be shared with final users.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channel_order_id
     *
     * @return string|null
     */
    public function getChannelOrderId()
    {
        return $this->container['channel_order_id'];
    }

    /**
     * Sets channel_order_id
     *
     * @param string|null $channel_order_id Order identifier on the sales channel. This identifier is not guaranteed to be unique as multiple channels can use the same identifier.
     *
     * @return self
     */
    public function setChannelOrderId($channel_order_id)
    {
        if (is_null($channel_order_id)) {
            throw new \InvalidArgumentException('non-nullable channel_order_id cannot be null');
        }
        $this->container['channel_order_id'] = $channel_order_id;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \Ced\Model\Origin|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Ced\Model\Origin|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date time the order was created on the sales channel.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets channel_updated_at
     *
     * @return \DateTime|null
     */
    public function getChannelUpdatedAt()
    {
        return $this->container['channel_updated_at'];
    }

    /**
     * Sets channel_updated_at
     *
     * @param \DateTime|null $channel_updated_at Date time the order was last updated on the sales channel (can differ from the modification date time in Connect).
     *
     * @return self
     */
    public function setChannelUpdatedAt($channel_updated_at)
    {
        if (is_null($channel_updated_at)) {
            throw new \InvalidArgumentException('non-nullable channel_updated_at cannot be null');
        }
        $this->container['channel_updated_at'] = $channel_updated_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date time the order was last updated in Mirakl Connect.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current order status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_reason
     *
     * @return string|null
     */
    public function getStatusReason()
    {
        return $this->container['status_reason'];
    }

    /**
     * Sets status_reason
     *
     * @param string|null $status_reason Additional reason about the order status. Availability depends on the order status.
     *
     * @return self
     */
    public function setStatusReason($status_reason)
    {
        if (is_null($status_reason)) {
            throw new \InvalidArgumentException('non-nullable status_reason cannot be null');
        }
        $allowedValues = $this->getStatusReasonAllowableValues();
        if (!in_array($status_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status_reason', must be one of '%s'",
                    $status_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_reason'] = $status_reason;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Ced\Model\OrderLineResponse[]|null
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Ced\Model\OrderLineResponse[]|null $order_lines Information about ordered products
     *
     * @return self
     */
    public function setOrderLines($order_lines)
    {
        if (is_null($order_lines)) {
            throw new \InvalidArgumentException('non-nullable order_lines cannot be null');
        }
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets billing_info
     *
     * @return \Ced\Model\BillingInfo|null
     */
    public function getBillingInfo()
    {
        return $this->container['billing_info'];
    }

    /**
     * Sets billing_info
     *
     * @param \Ced\Model\BillingInfo|null $billing_info billing_info
     *
     * @return self
     */
    public function setBillingInfo($billing_info)
    {
        if (is_null($billing_info)) {
            throw new \InvalidArgumentException('non-nullable billing_info cannot be null');
        }
        $this->container['billing_info'] = $billing_info;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Ced\Model\ShippingInfo|null
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Ced\Model\ShippingInfo|null $shipping_info shipping_info
     *
     * @return self
     */
    public function setShippingInfo($shipping_info)
    {
        if (is_null($shipping_info)) {
            throw new \InvalidArgumentException('non-nullable shipping_info cannot be null');
        }
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \Ced\Model\Fulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \Ced\Model\Fulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


